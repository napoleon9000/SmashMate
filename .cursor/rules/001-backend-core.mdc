---
description: 
globs: 
alwaysApply: false
---
---

name: smashmate\_backend\_core

# This rule should ALWAYS be applied when the AI is working inside the Smash Mate backend.
Stack: Python 3.11 · uv · FastAPI · SQLAlchemy 2.0 (Async) · Supabase Local Development · PostGIS · Alembic · PyTest · pydantic-settings.
Architectural constraints: async DB access only, domain logic isolated in `services/`, migrations via Alembic, rating logic uses `trueskill` synchronously inside a DB transaction.
Security: Supabase JWT auth, explicit RLS checks, no raw SQL string concat.
ALWAYS follow these rules.
version: "1.0"
globs:

* "app/\*\*"
* "alembic/\*\*"
* "tests/\*\*"
  alwaysApply: true

---

# Smash Mate Backend – Core Rules

## Project Structure
```
app/
├── api/          # API endpoints
├── core/         # Core functionality
├── models/       # SQLAlchemy models
├── schemas/      # Pydantic schemas
└── services/     # Business logic

tests/
├── api/          # API tests
├── integration/  # Integration tests
└── unit/         # Unit tests
```

## Tech Stack
* **Package Manager**: uv
* **Framework**: FastAPI
* **Database**: Supabase Local Development (PostgreSQL + PostGIS)
* **ORM**: SQLAlchemy 2.0 (Async)
* **Migrations**: Alembic
* **Testing**: pytest, supabase-py

## Package Management with uv
* Use `uv` for all package management tasks:
  * Initialize project: `uv init`
  * Add dependencies: `uv add <package-name>`
  * Add dev dependencies: `uv add --dev <package-name>`
  * Sync dependencies: `uv sync`
  * Update dependencies: `uv pip compile`
* Keep `pyproject.toml` as the single source of truth for dependencies
* Use `uv sync` to ensure all dependencies are installed correctly
* Run `uv pip compile` before committing dependency changes

## Virtual Environment Usage
* Always activate the virtual environment before running commands:
  ```bash
  source .venv/bin/activate  # On Unix/macOS
  # or
  .venv\Scripts\activate  # On Windows
  ```
* After activating the virtual environment, run commands directly:
  ```bash
  pytest  # Instead of uv pip run pytest
  uvicorn app.main:app --reload  # Instead of uv pip run uvicorn
  alembic upgrade head  # Instead of uv pip run alembic
  ```

## Code Style
* Follow PEP 8
* Use type hints
* Document public APIs
* Keep functions small and focused
* Use async/await for I/O operations

## Database
* Use SQLAlchemy async session
* Define models in `app/models/`
* Use Alembic for migrations
* Follow naming conventions:
  * Tables: plural, snake_case
  * Columns: snake_case
  * Foreign keys: `{table_name}_id`

## API Design
* RESTful endpoints
* Version all endpoints (`/api/v1/...`)
* Use proper HTTP methods
* Return appropriate status codes
* Document with OpenAPI/Swagger

## Testing
* Write tests for all new features
* Use pytest fixtures
* Mock external services
* Test edge cases
* Use **supabase-py** for Supabase integration testing

## Security
* Use Supabase Auth for authentication
* Implement Row Level Security (RLS)
* Validate all input
* Sanitize database queries
* Use environment variables for secrets

## Error Handling
* Use custom exceptions
* Log errors properly
* Return meaningful error messages
* Handle edge cases gracefully

## Performance
* Use async operations
* Optimize database queries
* Cache when appropriate
* Monitor response times

## Documentation
* Keep README up to date
* Document API endpoints
* Add inline comments for complex logic
* Update migration summaries

## Local Development
* Use Supabase CLI for local development
* Run tests before committing
* Format code with black
* Lint with ruff
* Use pre-commit hooks

## 1 Stack & Conventions

* **Python 3.11** runtime only.
* **FastAPI** HTTP framework; mount all routers below **`/api`**.
* **SQLAlchemy 2.0** in **async** mode (`async_engine`, `async_session`).
* **Supabase Local Development** with **PostGIS** extension enabled.
* Migrations handled by **Alembic**; do *not* edit tables manually.
* **TrueSkill** rating computed synchronously *inside* the same transaction that persists a match.

## 2 Directory Layout

```
app/
  core/          # config, logging, db setup
  api/           # FastAPI routers
  models/        # SQLAlchemy models
  services/      # domain/business logic
  schemas/       # Pydantic DTOs
tests/
  integration/   # Supabase integration tests using supabase-py
  database/      # pgTAP unit tests for database schema
alembic/
  versions/
```

* Keep `__init__.py` files empty (or re‑exports only). No runtime logic.

## 3 Code Style & Tooling

* Format with **Black**; lint with **Ruff**.
* Type‑annotate **all** public functions; pass `mypy --strict`.
* Use `python-json-logger`; middleware adds `X-Request-ID` to every log line.

## 4 Testing

* Use **PyTest** + **pytest‑asyncio** for API and unit tests.
* Use **supabase-py** for integration tests with Supabase features.
* Use **pgTAP** for database schema and constraint testing.
* Provide a DB fixture that connects to Supabase local instance.
* Strive for ≥ 90 % coverage. Bug fixes start with a failing test.

## 5 Security & Auth

* Accept Supabase JWT in `Authorization: Bearer <token>`; validate against public JWK.
* Enforce authorization in service layer: user must own or participate in a resource for update/delete.
* Leverage Supabase Row Level Security (RLS) policies for data access control.

## 6 Database Rules

* Primary keys are `uuid` generated via `uuid_generate_v4()`.
* Geographic data uses `geography(Point, 4326)`.
* Use `ON DELETE CASCADE` where child has no meaning without parent.
* Never `SELECT *` large tables; paginate.
* Use Supabase auth.users table for user authentication.

## 7 Local Development

* Use **Supabase CLI** for local development: `make supabase-start`.
* Local services available at:
  - Database: `postgresql://postgres:postgres@localhost:54322/postgres`
  - API: `http://localhost:54321`
  - Studio: `http://localhost:54323`
* Pre‑commit hooks: `ruff`, `black --check`, `pytest -q`.

## 8 Documentation

* Keep `/docs/openapi.yaml` in sync via `make schema`.

## 9 Referenced Templates (auto‑attach)

@core/config.py
@core/database.py
@api/routers/health.py

*The agent should use these rules to guide all future code generation for the backend.*
