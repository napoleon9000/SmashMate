---
description: The schema and RLS policy of the database
globs: 
alwaysApply: false
---
## Main Table Structure
-- 2.1 User Profiles
create table profiles (
  user_id uuid primary key references auth.users on delete cascade,
  display_name text,
  avatar_url text,
  default_venue uuid references venues(id)
);

-- 2.2 Venues (with geospatial support)
create extension if not exists postgis;
create table venues (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  location geography(point, 4326) not null, -- lat/lon
  address text,
  created_by uuid references auth.users
);
create index venues_location_idx on venues using gist(location);

-- 2.3 Follows
create table follows (
  follower uuid references auth.users on delete cascade,
  followee uuid references auth.users on delete cascade,
  created_at timestamp default now(),
  primary key (follower, followee)
);

-- 2.4 Teams and Player Ratings
create table teams (
  id uuid primary key default gen_random_uuid(),
  player_a uuid not null,
  player_b uuid not null,
  mu numeric not null,
  sigma numeric not null,
  games_played int default 0,
  constraint unique_player_pair check (player_a < player_b)
);

create table player_ratings (
  player_id uuid primary key references auth.users on delete cascade,
  mu numeric not null,
  sigma numeric not null,
  games_played int default 0
);

-- 2.5 Matches and Players
create type match_status as enum ('confirmed','pending');

create table matches (
  id uuid primary key default gen_random_uuid(),
  venue_id uuid references venues(id),
  played_at timestamptz not null,
  created_by uuid references auth.users,
  scores jsonb not null,            -- [{set:1,team1:21,team2:17}, ...]
  status match_status default 'confirmed',
  version int default 1             -- optimistic lock
);

create table match_players (
  match_id uuid references matches(id) on delete cascade,
  player_id uuid references auth.users,
  team smallint check (team in (1,2)),
  is_winner bool,
  primary key (match_id, player_id)
);
create index mp_player_idx on match_players(player_id);

-- 2.6 Compatibility Calculation (On-the-Fly)
-- Compatibility scores are calculated dynamically using the formula:
-- compatibility_score = team_mu - ((player1_mu + player2_mu) / 2)
-- This approach is more efficient and always up-to-date compared to materialized views.
-- The calculation is performed in the application layer by querying teams and player_ratings tables.

-- 2.7 Messaging System
create table messages (
  id uuid primary key default gen_random_uuid(),
  sender_id uuid references auth.users on delete cascade,
  receiver_id uuid references auth.users on delete cascade,
  content text not null,
  created_at timestamptz default now()
);

create table groups (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  creator_id uuid references auth.users on delete cascade,
  created_at timestamptz default now()
);

create table group_members (
  group_id uuid references groups(id) on delete cascade,
  user_id uuid references auth.users on delete cascade,
  primary key (group_id, user_id)
);

create table group_messages (
  id uuid primary key default gen_random_uuid(),
  group_id uuid references groups(id) on delete cascade,
  sender_id uuid references auth.users on delete cascade,
  content text not null,
  created_at timestamptz default now()
);

## Main Row Level Security Policy
alter table profiles enable row level security;
create policy "self profile" on profiles
  for select using (user_id = auth.uid());

alter table venues enable row level security;
create policy "public read venues"  on venues for select using (true);
create policy "create venue"        on venues for insert with check (created_by = auth.uid());
create policy "edit own venue"      on venues for update using (created_by = auth.uid());

alter table follows enable row level security;
create policy "follow myself only"  on follows
  for insert with check (follower = auth.uid());
create policy "read my follows"     on follows
  for select using (
    follower = auth.uid() or followee = auth.uid()
  );

alter table matches enable row level security;
create policy "view participants" on matches
  for select using (
    exists (
      select 1 from match_players mp
      where mp.match_id = id and mp.player_id = auth.uid()
    )
  );
create policy "edit participants" on matches
  for update using (
    exists (
      select 1 from match_players
      where match_id = id and player_id = auth.uid()
    )
  );

alter table match_players enable row level security;
create policy "only participants insert" on match_players
  for insert with check (player_id = auth.uid());
create policy "participants read" on match_players
  for select using (
    player_id = auth.uid() OR
    exists (select 1 from match_players mp2
            where mp2.match_id = match_id and mp2.player_id = auth.uid())
  );

-- Messaging RLS Policies
alter table messages enable row level security;
create policy "read own direct messages" on messages
  for select using (
    sender_id = auth.uid() or receiver_id = auth.uid()
  );
create policy "send direct messages" on messages
  for insert with check (sender_id = auth.uid());

alter table groups enable row level security;
create policy "group creator" on groups
  for insert with check (creator_id = auth.uid());
create policy "view own groups" on groups
  for select using (
    creator_id = auth.uid() or
    exists (
      select 1 from group_members m
      where m.group_id = id and m.user_id = auth.uid()
    )
  );

alter table group_members enable row level security;
create policy "join group" on group_members
  for insert with check (
    auth.uid() = user_id or auth.uid() = (
      select creator_id from groups g where g.id = group_id
    )
  );
create policy "view group members" on group_members
  for select using (
    exists (
      select 1 from group_members m
      where m.group_id = group_id and m.user_id = auth.uid()
    )
  );

alter table group_messages enable row level security;
create policy "send group message" on group_messages
  for insert with check (
    sender_id = auth.uid() and exists (
      select 1 from group_members m
      where m.group_id = group_id and m.user_id = auth.uid()
    )
  );
create policy "read group messages" on group_messages
  for select using (
    exists (
      select 1 from group_members m
      where m.group_id = group_id and m.user_id = auth.uid()
    )
  );